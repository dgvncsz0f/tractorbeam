-*- mode: markdown; -*-

# tractorbeam(1) -- Monitors processes and reports state on zookeeper #

## SYNOPSIS ##

`tractorbeam` {send|recv} [OPTION]...

## DESCRIPTION ##

`tractorbeam` uses a user given program to collect information about
something and report its output on zookeeper.

The motivation for writing this was to use zookeeper as a naming
service. For instance, suppose you have a network service running on
several different machines. The the following would allow you to
discover these machines (suppose you run this on every single one):

    tractorbeam send \
                --zookeeper my-zk-cluster:2181 \
                --delay 1 \
                --path /my/service/$(uuid) \
                --exec /usr/bin/hostname \
                -- --fqdn

The above command would execute `hostname` command once a second
(`--delay` switch) then report the output on node given by the
`--path` switch.

Then you can read this entire tree and write it to a file:

    tractorbeam recv \
                --zookeeper my-zk-cluster:2181 \
                --path /my/service \
                --output zookeeper.tree

This would create/update an INI file with the contents of the
zookeeper cluster.

## RECV MODE ##

### SYNOPSIS ###

`tractorbeam` recv [OPTION]...

### OPTIONS ###

  * `--zookeeper` STRING:

    The zookeeper cluster you want to connect to. You may use comma to
    provide multiple hosts and optionally define a chroot path
    (e.g. "zk01:2181,zk02:2182/chroot");

  * `--path` STRING:

    The path of the tree you want to retrieve from zookeeper;

  * `--output` {FILE,-}:

    The file to write contents into. The value `-` means stdout;

## SEND MODE ##

### SYNOPSIS ###

`tractorbeam` send [OPTION]... -- [ARGV]...

### OPTIONS ###

  * `--zookeeper` STRING:

    The zookeeper cluster you want to connect to. You may use comma to
    provide multiple hosts and optionally define a chroot path
    (e.g. "zk01:2181,zk02:2182/chroot");

  * `--path` STRING:

    The path of the node you want to create on zookeeper. Notice all
    the parents must exist and you must have write permissions.

    The node is *ephemeral* and have *OPEN_UNSAFE* acl;

  * `--exec` FILE:

    The image you want to execute. This must be an absolute path. This
    program must terminate faster than `--delay` otherwise it
    gets killed and the node on zookeeper is removed.

    The data you want to write on zookeeper should be written on
    *stdout* (a pipe). Additionally *stdin* and *stderr* are
    redirected to */dev/null*.

    If this process *exists 0* the zookeeper node gets either created
    or updated. Anything else deletes the node;

  * `--delay` SECONDS:

    The interval at which the `--exec` program gets invoked (the time
    spent running the process is not taken into account). This value
    also defines the timeout for the process to terminate;

  * `--timeout` MILLISECS:

    The timeout option to use when connecting zookeeper. This informs
    zookeeper to keep the ephemeral this long before deleting in the
    event no heartbeat is received;

  * `--help`:

    Prints a short help message;

## AUTHOR ##

Written by dgvncsz0f

## COPYRIGHT ##

Copyright (c) 2013 Diego Souza. License BSD.

## TODO ##

  * Sign the contents of the mode;
